{"version":3,"file":"Effectful.js","names":["createEffect","createRoot","getOwner","runWithOwner","Effectful","Base","owner","dispose","fn","stopEffects","Effects","Object"],"sources":["../src/Effectful.ts"],"sourcesContent":["import {createEffect, createRoot, getOwner, type Owner, runWithOwner} from 'solid-js'\nimport type {AnyConstructor} from 'lowclass'\n\n/**\n * @class Effectful -\n *\n * `mixin`\n *\n * Create Solid.js effects using `this.createEffect(fn)` and easily stop them\n * all by calling `this.stopEffects()`.\n *\n * Example:\n *\n * ```js\n * import {element, Effectful} from 'lume'\n *\n * ⁣@element('my-element')\n * class MyElement extends Effectful(HTMLElement) {\n *   ⁣@attribute foo = \"foo\"\n *   ⁣@attribute bar = \"bar\"\n *\n *   connectedCallback() {\n *     // Log `foo` and `bar` any time either of them change.\n *     this.createEffect(() => {\n *       console.log('foo, bar:', this.foo, this.bar)\n *     })\n *\n *     // Log only `bar` any time it changes.\n *     this.createEffect(() => {\n *       console.log('bar:', this.bar)\n *     })\n *   }\n *\n *   disconnectedCallback() {\n *     // Stop both of the effects.\n *     this.stopEffects()\n *   }\n * }\n * ```\n */\nexport function Effectful<T extends AnyConstructor>(Base: T) {\n\treturn class Effectful extends Base {\n\t\t#owner: Owner | null = null\n\t\t#dispose: StopFunction | null = null\n\n\t\t/**\n\t\t * Create a Solid.js effect. If there's no owner (i.e. this will be a\n\t\t * top-level effect) then it implicitly creates an owner. Normally with\n\t\t * Solid.js you must use createRoot with top-level effects, and this\n\t\t * prevents that for convenience.\n\t\t *\n\t\t * All effects of the current Effectful instance run in their own\n\t\t * reactive context (root).\n\t\t */\n\t\tcreateEffect(fn: () => void) {\n\t\t\t// Use the same root for all effects of the instance.\n\t\t\tif (!this.#owner) {\n\t\t\t\tcreateRoot(dispose => {\n\t\t\t\t\tthis.#owner = getOwner()\n\t\t\t\t\tthis.#dispose = dispose\n\t\t\t\t})\n\t\t\t}\n\n\t\t\trunWithOwner(this.#owner!, () => createEffect(fn))\n\t\t}\n\n\t\t/**\n\t\t * Stop all of the effects that were created. For example, create\n\t\t * effects in a constructor, then stop them all in a destructor, to\n\t\t * avoid mem leaks.\n\t\t */\n\t\tstopEffects() {\n\t\t\tthis.#dispose?.()\n\t\t\tthis.#dispose = null\n\t\t\tthis.#owner = null\n\t\t}\n\t}\n}\n\n/**\n * Shortcut for instantiating directly instead of using the mixin.\n */\nexport class Effects extends Effectful(Object) {}\n\ntype StopFunction = () => void\n"],"mappings":"AAAA,SAAQA,YAAY,EAAEC,UAAU,EAAEC,QAAQ,EAAcC,YAAY,QAAO,UAAU;AAGrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAA2BC,IAAO,EAAE;EAC5D,OAAO,MAAMD,SAAS,SAASC,IAAI,CAAC;IACnC,CAACC,KAAK,GAAiB,IAAI;IAC3B,CAACC,OAAO,GAAwB,IAAI;;IAEpC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEP,YAAYA,CAACQ,EAAc,EAAE;MAC5B;MACA,IAAI,CAAC,IAAI,CAAC,CAACF,KAAK,EAAE;QACjBL,UAAU,CAACM,OAAO,IAAI;UACrB,IAAI,CAAC,CAACD,KAAK,GAAGJ,QAAQ,CAAC,CAAC;UACxB,IAAI,CAAC,CAACK,OAAO,GAAGA,OAAO;QACxB,CAAC,CAAC;MACH;MAEAJ,YAAY,CAAC,IAAI,CAAC,CAACG,KAAK,EAAG,MAAMN,YAAY,CAACQ,EAAE,CAAC,CAAC;IACnD;;IAEA;AACF;AACA;AACA;AACA;IACEC,WAAWA,CAAA,EAAG;MACb,IAAI,CAAC,CAACF,OAAO,GAAG,CAAC;MACjB,IAAI,CAAC,CAACA,OAAO,GAAG,IAAI;MACpB,IAAI,CAAC,CAACD,KAAK,GAAG,IAAI;IACnB;EACD,CAAC;AACF;;AAEA;AACA;AACA;AACA,OAAO,MAAMI,OAAO,SAASN,SAAS,CAACO,MAAM,CAAC,CAAC"}