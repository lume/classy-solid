{"version":3,"file":"createStoppableEffect.js","names":["createEffect","createSignal","createStoppableEffect","fn","running","setRunning","stop","resume"],"sources":["../src/createStoppableEffect.ts"],"sourcesContent":["import {createEffect, createSignal} from 'solid-js'\n\nexport type Effect = {stop: () => void; resume: () => void}\n\n/**\n * NOTE: Experimental\n *\n * Create a stoppable effect.\n *\n * ```js\n * const effect = createStoppableEffect(() => {...})\n *\n * // ...later, stop the effect from running again.\n * effect.stop()\n * ```\n *\n * Note, this is experimental because when inside of a parent reactive context\n * that is long-lived (f.e. for life time of the app), each new effect created\n * with this and subsequently stopped will stick around and not be GC'd until\n * the parent context is cleaned up (which could be never).\n *\n * Stopped effects will currently only be GC'd freely when they are created\n * outside of a reactive context.\n */\nexport function createStoppableEffect(fn: () => void): Effect {\n\tconst [running, setRunning] = createSignal(true)\n\tcreateEffect(() => running() && fn())\n\treturn {stop: () => setRunning(false), resume: () => setRunning(true)}\n}\n"],"mappings":"AAAA,SAAQA,YAAY,EAAEC,YAAY,QAAO,UAAU;AAInD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAACC,EAAc,EAAU;EAC7D,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGJ,YAAY,CAAC,IAAI,CAAC;EAChDD,YAAY,CAAC,MAAMI,OAAO,CAAC,CAAC,IAAID,EAAE,CAAC,CAAC,CAAC;EACrC,OAAO;IAACG,IAAI,EAAEA,CAAA,KAAMD,UAAU,CAAC,KAAK,CAAC;IAAEE,MAAM,EAAEA,CAAA,KAAMF,UAAU,CAAC,IAAI;EAAC,CAAC;AACvE"}