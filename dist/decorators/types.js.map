{"version":3,"file":"types.js","names":[],"sources":["../../src/decorators/types.ts"],"sourcesContent":["import type {Constructor} from 'lowclass'\n\nexport interface DecoratorContext {\n\tkind: 'class' | 'method' | 'getter' | 'setter' | 'field' | 'accessor'\n\tname: string | symbol\n\taccess: Access\n\tprivate?: boolean\n\tstatic?: boolean\n\taddInitializer?(initializer: () => void): void\n}\n\nexport interface Access {\n\tget?(): unknown\n\tset?(value: unknown): void\n}\n\nexport interface Accessor {\n\tget(): unknown\n\tset(value: unknown): void\n}\n\nexport type DecoratedValue = Constructor | Function | Accessor | undefined\n\nexport type DecoratorArgs = [DecoratedValue, DecoratorContext]\n\nexport type PropKey = string | symbol\n\n// If we add options for `@signal` later (f.e. `@signal({equals: false})`),\n// those options can go in here too.\nexport interface PropSpec {\n\tinitialValue: unknown\n}\n"],"mappings":""}