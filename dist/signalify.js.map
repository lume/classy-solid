{"version":3,"file":"signalify.js","names":["getInheritedDescriptor","createSignal","$PROXY","untrack","signalifiedProps","WeakMap","signalify","obj","props","_props","length","Object","keys","concat","getOwnPropertySymbols","prop","createSignalAccessor","gotCreateSignalAccessor","getCreateSignalAccessor","Error","propsSetAtLeastOnce","__isPropSetAtLeastOnce","instance","get","has","trackPropSetAtLeastOnce","set","Set","add","isSignalGetter","WeakSet","initialVal","override","proxy","descriptor","originalGet","originalSet","console","warn","toString","value","writable","s","equals","configurable","enumerable","call","newValue","defineProperty"],"sources":["../src/signalify.ts"],"sourcesContent":["import {getInheritedDescriptor} from 'lowclass'\nimport {createSignal, $PROXY, untrack} from 'solid-js'\nimport type {PropKey, PropSpec} from './decorators/types.js'\n\nconst signalifiedProps = new WeakMap<object, Set<string | symbol>>()\n\n/**\n * Convert properties on an object into Solid signal-backed properties.\n *\n * There are two ways to use this: either by defining which properties to\n * convert to signal-backed properties by providing an array as property names\n * in the second arg, which is useful on plain objects, or by passing in `this`\n * and `this.constructor` within the `constructor` of a class that has\n * properties decorated with `@signal`.\n *\n * Example with a class:\n *\n * ```js\n * import {signalify} from 'classy-solid'\n * import {createEffect} from 'solid-js'\n *\n * class Counter {\n *   count = 0\n *\n *   constructor() {\n *     signalify(this, 'count')\n *     setInterval(() => this.count++, 1000)\n *   }\n * }\n *\n * const counter = new Counter\n *\n * createEffect(() => {\n *   console.log('count:', counter.count)\n * })\n * ```\n *\n * Example with a plain object:\n *\n * ```js\n * import {signalify} from 'classy-solid'\n * import {createEffect} from 'solid-js'\n *\n * const counter = {\n *   count: 0\n * }\n *\n * signalify(counter, 'count')\n * setInterval(() => counter.count++, 1000)\n *\n * createEffect(() => {\n *   console.log('count:', counter.count)\n * })\n * ```\n */\nexport function signalify<T extends object>(obj: T, ...props: (keyof T)[]): T\nexport function signalify<T extends object, K extends keyof T>(obj: T): T\nexport function signalify(obj: Obj, ...props: [] | [Map<PropKey, PropSpec>] | PropertyKey[]) {\n\t// We cast from PropertyKey[] to PropKey[] because numbers can't actually be keys, only string | symbol.\n\tconst _props = props.length\n\t\t? (props as PropKey[])\n\t\t: (Object.keys(obj) as PropKey[]).concat(Object.getOwnPropertySymbols(obj))\n\n\tfor (const prop of _props) createSignalAccessor(obj, prop)\n\n\treturn obj\n}\n\nlet gotCreateSignalAccessor = false\n\n/**\n * This ensures that `createSignalAccessor` is kept internal to classy-solid only.\n */\nexport function getCreateSignalAccessor() {\n\tif (gotCreateSignalAccessor) throw new Error('Export \"createSignalAccessor\" is internal to classy-solid only.')\n\tgotCreateSignalAccessor = true\n\treturn createSignalAccessor\n}\n\n// propsSetAtLeastOnce is a Set that tracks which reactive properties have been\n// set at least once.\nconst propsSetAtLeastOnce = new WeakMap<object, Set<string | symbol>>()\n\n// @lume/element uses this to detect if a reactive prop has been set, and if so\n// will not overwrite the value with any pre-existing value from custom element\n// pre-upgrade.\nexport function __isPropSetAtLeastOnce(instance: object, prop: string | symbol) {\n\treturn !!propsSetAtLeastOnce.get(instance)?.has(prop)\n}\n\nfunction trackPropSetAtLeastOnce(instance: object, prop: string | symbol) {\n\tif (!propsSetAtLeastOnce.has(instance)) propsSetAtLeastOnce.set(instance, new Set())\n\tpropsSetAtLeastOnce.get(instance)!.add(prop)\n}\n\nconst isSignalGetter = new WeakSet<Function>()\n\nfunction createSignalAccessor<T extends object>(\n\tobj: T,\n\tprop: Exclude<keyof T, number>,\n\t// Untrack here to be extra safe this doesn't count as a dependency and\n\t// cause a reactivity loop.\n\tinitialVal: unknown = untrack(() => obj[prop]),\n\t// If an object already has a particular signalified property, override it\n\t// with a new one anyway (useful for maintaining consistency with class\n\t// inheritance where class fields always override fields from base classes\n\t// due to their [[Define]] semantics). False is a good default for signalify()\n\t// usage where someone is augmenting an existing object, but true is more\n\t// useful with usage of @signal on class fields.\n\t//\n\t// Note that if @signal were to specify this as false, it would cause\n\t// @signal-decorated subclass fields to override base class\n\t// @signal-decorated fields with a new value descriptor but without\n\t// signalifiying the field, effectively disabling reactivity, which is a bug\n\t// (a field decorated with @signal *must* be reactive). The test named\n\t// \"maintains reactivity in subclass overridden fields\" was added to ensure\n\t// that the subclass use case works.\n\toverride = false,\n): void {\n\tif (!override && signalifiedProps.get(obj)?.has(prop)) return\n\n\t// Special case for Solid proxies: if the object is already a solid proxy,\n\t// all properties are already reactive, no need to signalify.\n\t// @ts-expect-error special indexed access\n\tconst proxy = obj[$PROXY] as T\n\tif (proxy) return\n\n\tlet descriptor: PropertyDescriptor | undefined = getInheritedDescriptor(obj, prop)\n\n\tlet originalGet: (() => any) | undefined\n\tlet originalSet: ((v: any) => void) | undefined\n\n\tif (descriptor) {\n\t\toriginalGet = descriptor.get\n\t\toriginalSet = descriptor.set\n\n\t\t// Even if override is true, if we have a signal accessor, there's no\n\t\t// need to replace it with another signal accessor. We only need to\n\t\t// override when the current descriptor is not a signal accessor.\n\t\t// TODO this needs tests.\n\t\tif (originalGet && isSignalGetter.has(originalGet)) return\n\n\t\tif (originalGet || originalSet) {\n\t\t\t// reactivity requires both\n\t\t\tif (!originalGet || !originalSet) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`The \\`@signal\\` decorator was used on an accessor named \"${prop.toString()}\" which had a getter or a setter, but not both. Reactivity on accessors works only when accessors have both get and set. In this case the decorator does not do anything.`,\n\t\t\t\t)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tdelete descriptor.get\n\t\t\tdelete descriptor.set\n\t\t} else {\n\t\t\t// If there was a value descriptor, trust it as the source of truth\n\t\t\t// for initialVal. For example, if the user class modifies the value\n\t\t\t// after the initializer, it will have a different value than what\n\t\t\t// we tracked from the initializer.\n\t\t\tinitialVal = descriptor.value\n\n\t\t\t// if it isn't writable, we don't need to make a reactive variable because\n\t\t\t// the value won't change\n\t\t\tif (!descriptor.writable) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`The \\`@signal\\` decorator was used on a property named \"${prop.toString()}\" that is not writable. Reactivity is not enabled for non-writable properties.`,\n\t\t\t\t)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tdelete descriptor.value\n\t\t\tdelete descriptor.writable\n\t\t}\n\t}\n\n\tconst s = createSignal(initialVal, {equals: false})\n\n\tdescriptor = {\n\t\tconfigurable: true,\n\t\tenumerable: true,\n\t\t...descriptor,\n\t\tget: originalGet\n\t\t\t? function (this: T): unknown {\n\t\t\t\t\ts[0]() // read\n\t\t\t\t\treturn originalGet!.call(this)\n\t\t\t  }\n\t\t\t: function (this: any): unknown {\n\t\t\t\t\treturn s[0]() // read\n\t\t\t  },\n\t\tset: originalSet\n\t\t\t? function (this: any, newValue: unknown) {\n\t\t\t\t\toriginalSet!.call(this, newValue)\n\n\t\t\t\t\ttrackPropSetAtLeastOnce(this, prop)\n\n\t\t\t\t\t// write\n\t\t\t\t\tif (typeof newValue === 'function') s[1](() => newValue)\n\t\t\t\t\telse s[1](newValue)\n\t\t\t  }\n\t\t\t: function (this: any, newValue: unknown) {\n\t\t\t\t\ttrackPropSetAtLeastOnce(this, prop)\n\n\t\t\t\t\t// write\n\t\t\t\t\tif (typeof newValue === 'function') s[1](() => newValue)\n\t\t\t\t\telse s[1](newValue)\n\t\t\t  },\n\t}\n\n\tisSignalGetter.add(descriptor.get!)\n\n\tObject.defineProperty(obj, prop, descriptor)\n\n\tif (!signalifiedProps.has(obj)) signalifiedProps.set(obj, new Set())\n\tsignalifiedProps.get(obj)!.add(prop)\n}\n\ntype Obj = Record<PropKey, unknown>\n"],"mappings":"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"}